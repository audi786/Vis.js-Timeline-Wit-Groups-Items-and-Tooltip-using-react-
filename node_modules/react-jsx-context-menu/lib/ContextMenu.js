"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ContextMenu extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "menuRef", null);

    _defineProperty(this, "state", {
      open: false,
      location: {
        x: 0,
        y: 0
      }
    });

    _defineProperty(this, "onClickOff", event => {
      if (this.menuRef !== null && event.target !== this.menuRef && !this.menuRef.contains(event.target)) {
        this.setState({
          open: false
        });
      }
    });

    _defineProperty(this, "onRightClick", (x, y) => {
      this.setState(() => ({
        open: true,
        location: {
          x,
          y
        }
      }));
    });
  }

  componentDidMount() {
    document.addEventListener('mousedown', this.onClickOff);
  }

  componentWillUnmount() {
    document.removeEventListener('mousedown', this.onClickOff);
  }

  render() {
    const {
      children,
      menu,
      ...rest
    } = this.props;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.cloneElement(children, {
      onContextMenu: event => {
        event.preventDefault();
        this.onRightClick(event.pageX, event.pageY);
      }
    }), this.state.open && /*#__PURE__*/React.createElement("div", _extends({
      ref: menu => {
        if (menu) {
          this.menuRef = menu;
        }
      },
      style: {
        position: 'absolute',
        left: this.state.location.x,
        top: this.state.location.y,
        margin: 0,
        padding: 0
      }
    }, rest), menu));
  }

}

exports.default = ContextMenu;